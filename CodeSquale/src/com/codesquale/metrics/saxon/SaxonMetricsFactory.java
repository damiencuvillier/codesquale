package com.codesquale.metrics.saxon;

import java.io.File;
import java.util.Properties;

import javax.xml.transform.OutputKeys;
import javax.xml.transform.stream.StreamResult;

import net.sf.saxon.trans.XPathException;

import org.apache.log4j.Logger;

import com.codesquale.metrics.IMetricsFactory;
import com.codesquale.metrics.ProjectGlobalCounters;

/**
 * 
 * @author dwillier
 * 
 * Class in charge of executing XQuery Request based on Saxon implementation and
 * returning results of request.
 * 
 */
public class SaxonMetricsFactory implements IMetricsFactory {

	/**
	 * Log object for the SaxonMetricsFactory
	 */
	private static Logger logger = Logger.getLogger(SaxonMetricsFactory.class);

	/**
	 * This method executes the main xquery (calculates counters and ratios) on
	 * a single xml result file generated by the XSLT transformation from the
	 * XML ANTLR tree. Moreover, it increments the project global counter each
	 * time a input file is processed.
	 * 
	 * @param fullPathSourceFile
	 *            It is the full path of the input results file.
	 * @param fullPathResultFile
	 *            It is the full path of the output file generated by the
	 *            method. This file contains counters and metrics calculated
	 *            from the input file.
	 */
	@SuppressWarnings("deprecation")
	public void CalculateCountersFromSourceFile(String fullPathSourceFile,
			String fullPathResultFile) {
		logger.debug("Processing Xquery counting from the file "
				+ fullPathSourceFile + " ...");
		// Setting to SaxonProcessor the file to analyze
		SaxonProcessor.getInstance().setXMLSourceDocument(fullPathSourceFile);
		// Call the private method that executes the query and serializes the
		// result
		ExecuteSingleFileCountingQuery(fullPathResultFile);

		// Setting to SaxonProcessor the source file as the result file just
		// being generated in order catch the package metrics
		SaxonProcessor.getInstance().setXMLSourceDocument(fullPathResultFile);

		int numberOfClasses = SaxonProcessor.getInstance()
				.ExecuteIntegerScaler(
						SaxonQueryProvider.getInstance()
								.getNumberOfClassesQueryObject());
		int numberOfPrivateClasses = SaxonProcessor.getInstance()
				.ExecuteIntegerScaler(
						SaxonQueryProvider.getInstance()
								.getNumberOfPrivateClassesQueryObject());
		int numberOfPublicClasses = SaxonProcessor.getInstance()
				.ExecuteIntegerScaler(
						SaxonQueryProvider.getInstance()
								.getNumberOfPublicClassesQueryObject());
		int numberOfFiles = SaxonProcessor.getInstance()
		.ExecuteIntegerScaler(
				SaxonQueryProvider.getInstance()
						.getNumberOfFilesObject());
		

		// TODO Rajouter logging si les compteurs sont == -1
		// Incrementing the global project counters
		if (numberOfClasses != -1)
			ProjectGlobalCounters.getInstance().incrementNumberOfClasses(
					numberOfClasses);
		if (numberOfPrivateClasses != -1)
			ProjectGlobalCounters.getInstance()
					.incrementNumberOfPrivateClasses(numberOfPrivateClasses);
		if (numberOfPublicClasses != -1)
			ProjectGlobalCounters.getInstance().incrementNumberOfPublicClasses(
					numberOfPublicClasses);
		
		if(numberOfFiles!=-1)
			ProjectGlobalCounters.getInstance().incrementNumberOfFiles(numberOfFiles);
			
		logger.debug("Xquery counting process finished " + fullPathResultFile
				+ " generated ...");
	}

	/**
	 * The method executes the counting xquery on a Tansformed XSLT results
	 * file.
	 * 
	 * @param outFileFullPath
	 *            Represents the full path of the counters file to be created.
	 */
	public void ExecuteSingleFileCountingQuery(String outFileFullPath) {
		Properties props = new Properties();
		props.setProperty(OutputKeys.METHOD, "xml");
		props.setProperty(OutputKeys.INDENT, "yes");

		try {
			SaxonQueryProvider.getInstance().getSingleFileCountingQueryObject()
					.run(SaxonProcessor.getInstance().getDynamicQueryContext(),
							new StreamResult(new File(outFileFullPath)), props);
		} catch (XPathException e) {
			logger.fatal(e.getMessage());
		}
	}

}