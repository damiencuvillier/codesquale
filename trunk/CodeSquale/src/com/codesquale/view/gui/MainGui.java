package com.codesquale.view.gui;

import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Rectangle;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.URL;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTabbedPane;
import javax.swing.JTextField;

import org.apache.tools.ant.util.FileUtils;
import org.jdesktop.jdic.desktop.Desktop;
import org.jdesktop.jdic.desktop.DesktopException;

import com.codesquale.logging.ConsoleArea;
import com.codesquale.utils.ExceptionLevel;
import com.codesquale.utils.ExceptionManager;
/** Main Graphic User Interface for CodeSquale.
 * It helps to select paths to use.
 * <br/>
 * 
 * It has been designed with Visual Editor Plugin
 * @author Damien
 *
 */
public class MainGui extends JFrame {
	/* Constants */
	
		/* Sockets Port */
		/** Global Process Socket Port. */
		private static final int GLOBALPROCESS_SOCKETPORT = 22020;
		/** Parsing Process (1) Socket Port. */
		private static final int PARSINGPROCESS_SOCKETPORT = 22021;
		/** Transform Process (2) Socket Port. */
		private static final int TRANSFORMPROCESS_SOCKETPORT = 22022;
		/** Metrics Calculation Process (3) Socket Port. */
		private static final int METRICSPROCESS_SOCKETPORT = 22023;
		/** Report Process (4) Socket Port. */
		private static final int REPORTPROCESS_SOCKETPORT = 22024;
		/** Debug Socket Port. => Display all messages. */
		private static final int DEBUG_SOCKETPORT = 22025;
		
		
		/** Program icon url. */
		private static final String PROGRAM_ICON_URL = 
			"/com/codesquale/view/gui/icon.jpg";
		/** Title. Displayed in the GUI Title Bar */
		private static final String PROGRAM_TITLE = "CodeSquale";
		
		/** AutoGenerated Serialization ID. */
		private static final long serialVersionUID = 1L;

		
		/* Constant Sizes */
		/** Window Width. */
		private static final int SIZE_WINDOW_WIDTH = 800;
		/** Window Minimal Height. */
		private static final int SIZE_WINDOW_HEIGHT = 600;
		
	/* // Constants */
		
		
	/* Graphic Components */
	/** Main Panel. */
	private JPanel contentPane;
	/** Form Panel : COntains all paths selectors. */
	private JPanel formPanel;
	/** Progress Panel : contains all progress status indicator. */
	private JPanel progressPanel;
	/** StepRadioButtons are used to display progress state. */
	private JRadioButton[] stepRadioButtons;
	/** Contains input dir value.*/
	private JTextField inputDirField;
	/** Contains output dir value.*/
	private JTextField outputDirField;
	/** Launchs FolderChooser Component to select a input Path. */
	private JButton inputBrowseButton;
	/** Launchs FolderChooser Component to select a outputPath. */
	private JButton outputBrowseButton;
	/** ActionButton : Launchs the CodeSquale process.*/
	private JButton actionButton;
	/** Contains all the consoles. */
	private JTabbedPane consolesTabbedPane;
	
	
	
	/** Default constructor.
	 * <br />
	 * Launchs Initialize Method.
	 */
	public MainGui() {
		super();
		initialize();
	}

	/** GUI Initialiation.
	 * Sets size and JFrame Properties.
	 */
	private void initialize() {
		this.setBounds(100,100,SIZE_WINDOW_WIDTH, SIZE_WINDOW_HEIGHT);
		this.setResizable(false);
		this.setTitle(PROGRAM_TITLE);
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		// Set Program Icon
		this.setIconImage(Toolkit.getDefaultToolkit()
				.getImage(getClass().getResource(PROGRAM_ICON_URL)));
		/* Set Content -> Recursive method. 
		 * Calls all the component initializations
		 */
		this.setContentPane(getJContentPane());
		this.setVisible(true);
	}

	/** Content Initialization.	  
	 * @return javax.swing.JPanel
	 */
	private JPanel getJContentPane() {
		if (contentPane == null) {
			contentPane = new JPanel();
			contentPane.setLayout(null);
			// add all main panels.
			contentPane.add(getFormPanel());
			contentPane.add(getProgressPanel());
			contentPane.add(getConsolesTabbedPane());
		}
		return contentPane;
	}

	/** FormPanel Initialization.
	 * Add all components.	
	 * 	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getFormPanel() {
		if (formPanel == null) {
			JLabel outputDirLabel = new JLabel();
			outputDirLabel.setBounds(new Rectangle(5, 25, 100, 15));
			outputDirLabel.setFont(new Font("Arial", Font.PLAIN, 12));
			outputDirLabel.setText("Output Dir :");
			JLabel inputDirLabel = new JLabel();
			inputDirLabel.setBounds(new Rectangle(5, 5, 100, 15));
			inputDirLabel.setFont(new Font("Arial", Font.PLAIN, 12));
			inputDirLabel.setText("Input Dir :");
			formPanel = new JPanel();
			formPanel.setLayout(null);
			formPanel.setBounds(new Rectangle(0, 5, SIZE_WINDOW_WIDTH, 60));
			formPanel.add(inputDirLabel);
			formPanel.add(outputDirLabel);
			formPanel.add(getInputDirField());
			formPanel.add(getOutputDirField());
			formPanel.add(getInputBrowseButton());
			formPanel.add(getOutputBrowseButton());
			formPanel.add(getActionButton());
		}
		return formPanel;
	}

	/** ProgressPanel Init.	
	 * @return javax.swing.JPanel	
	 */
	private JPanel getProgressPanel() {
		if (progressPanel == null) {
			progressPanel = new JPanel();
			progressPanel.setLayout(
					new GridLayout(1, getStepRadioButtons().length));
			progressPanel.setBounds(
					new Rectangle(0, 60, SIZE_WINDOW_WIDTH, 25));
			for (int i = 0; i < getStepRadioButtons().length; i++) {
				progressPanel.add(getStepRadioButtons()[i]);
				
			}
		}
		return progressPanel;
	}

	/** Status indicators Init.	
	 * 	
	 * @return javax.swing.JRadioButton	[]
	 */
	private JRadioButton[] getStepRadioButtons() {
		if (stepRadioButtons == null) {
			stepRadioButtons = new JRadioButton[]{
					new JRadioButton("0. Copying Sources"),
					new JRadioButton("1. Parsing Sources"),
					new JRadioButton("2. Generics XML"),
					new JRadioButton("3. Metrics Calculation"),
					new JRadioButton("4. Building Report"),
					new JRadioButton("5. External Tools")
			};
			for (int i = 0; i < stepRadioButtons.length; i++) {
				stepRadioButtons[i].setEnabled(false);
				stepRadioButtons[i].setFont(new Font("Arial", Font.PLAIN, 10));
			}
		}
		return stepRadioButtons;
	}


	/** InputDirField Init.	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getInputDirField() {
		if (inputDirField == null) {
			inputDirField = new JTextField();
			inputDirField.setBounds(new Rectangle(110, 5, 400, 20));
			inputDirField.setToolTipText("Where is source code located ?");
		}
		return inputDirField;
	}

	/** Outputdir field Init.	
	 * 	
	 * @return javax.swing.JTextField	
	 */
	private JTextField getOutputDirField() {
		if (outputDirField == null) {
			outputDirField = new JTextField();
			outputDirField.setBounds(new Rectangle(110, 25, 400, 20));
			outputDirField.setToolTipText("Where will results be stored ?");
		}
		return outputDirField;
	}

	/** input browse button Init.
	 * 
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getInputBrowseButton() {
		if (inputBrowseButton == null) {
			inputBrowseButton = new JButton();
			inputBrowseButton.setBounds(new Rectangle(510, 5, 30, 20));
			inputBrowseButton.setText("...");
			inputBrowseButton.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					String path = new FolderChooser().getFolder();
					if(!path.equals("")) inputDirField.setText(path);
				}
			});
		}
		return inputBrowseButton;
	}

	/**
	 * This method initializes outputBrowseButton	
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getOutputBrowseButton() {
		if (outputBrowseButton == null) {
			outputBrowseButton = new JButton();
			outputBrowseButton.setBounds(new Rectangle(510, 25, 30, 20));
			outputBrowseButton.setText("...");
			outputBrowseButton.addActionListener(
					new java.awt.event.ActionListener() {
				public void actionPerformed(final ActionEvent e) {
					String path = new FolderChooser().getFolder();
					if (!path.equals("")) {
						outputDirField.setText(path);
					}
				}
			});
		}
		return outputBrowseButton;
	}

	/** ActionButton init.
	 * 
	 * Contains CodeSquale Process Launch.
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getActionButton() {
		if (actionButton == null) {
			// Component Description
			actionButton = new JButton();
			actionButton.setBounds(new Rectangle(600, 5, 160, 25));
			actionButton.setText("Analyse Code");
			// Action : CodeSquale Launch
			actionButton.addActionListener(new ActionListener(){
				public void actionPerformed(final ActionEvent arg0) {
					/* Starting CodeSquale Process */
					String inputDir = inputDirField.getText();
					String outputDir = outputDirField.getText();
					if (inputDir.equals("")
							|| outputDir.equals("")) {
						/* Checks values are enterd */
						JOptionPane.showMessageDialog(getInstance(),
								"Please refer to valid path",
							      "Not possible",
							      JOptionPane.WARNING_MESSAGE);
						
					} else {
						actionButton.setText("Processing...");
						actionButton.setEnabled(false);
						
						/* CodeSquale Launch. 
						 *
						 */
						com.codesquale.launcher.Process process = 
							new com.codesquale.launcher.
								Process(new File(inputDir),
									new File(outputDir));
						process.start();
						
						// Status Watcher is used by status indicator
						new StatusWatcher().start();
					}
					
					
				}
				
			});
		}
		return actionButton;
	}
	
	/** @return MaiGui Instance. */
	private MainGui getInstance() {
		return this;
	}
	/** Launchs Browser.*
	 * Used after process.
	 */
	private void launchResults() {
		try {
			URL reportFile = new URL("file:///"
					+ outputDirField.getText() + "/" + "index.html");
			Desktop.browse(reportFile);
		} catch (MalformedURLException e) {
			ExceptionManager.aspectManagedException(e, 
					ExceptionLevel.ERROR);
		} catch (DesktopException e) {
			ExceptionManager.aspectManagedException(e, 
					ExceptionLevel.ERROR);
		}
	}

	/** ConsolesTabbedPane init.	
	 * 	
	 * @return javax.swing.JTabbedPane	
	 */
	private JTabbedPane getConsolesTabbedPane() {
		if (consolesTabbedPane == null) {
			consolesTabbedPane = new JTabbedPane();
			consolesTabbedPane.setBounds(new Rectangle(0, 86, 793, 481));
			consolesTabbedPane.addTab("CodeSquale Process", 
					null, new ConsoleArea(GLOBALPROCESS_SOCKETPORT), null);
			consolesTabbedPane.addTab("Parsing (1)", 
					null, new ConsoleArea(PARSINGPROCESS_SOCKETPORT), null);
			consolesTabbedPane.addTab("Transforming (2)",
					null, new ConsoleArea(TRANSFORMPROCESS_SOCKETPORT), null);
			consolesTabbedPane.addTab("Metrics (3)", 
					null, new ConsoleArea(METRICSPROCESS_SOCKETPORT), null);
			consolesTabbedPane.addTab("Report (4)", 
					null, new ConsoleArea(REPORTPROCESS_SOCKETPORT), null);
			consolesTabbedPane.addTab("Debug Console", 
					null, new ConsoleArea(DEBUG_SOCKETPORT), null);
		}
		return consolesTabbedPane;
	}
	
	/** Watch Status file.
	 * 
	 * Status Watcher is used to know the status during codesquale exec. 
	 * 
	 * <br /> 
	 * <b>How it works ?</b> 
	 * <br />
	 * By now, StatusTask (contained in com.codesquale.ant package)
	 * writes an integer in xml/status file. 
	 * <br />
	 * Status Watcher read also this file regulary (frequency = 1 sec) and 
	 * update the GUI from this information.
	 * 
	 * <br />
	 * 
	 * Status Watcher is also a Thread.
	 * @author Damien
	 *
	 */
	class StatusWatcher extends Thread {
		
		/** Where is located the status file.
		 * @see class description.
		 */
		private static final String STATUS_FILE = "xml/status";
		/** Refresh delay. 
		 * Delay between to read. */
		private static final int REFRESH_DELAY = 1000;
		/** Actuel step. Got by status file reading. */
		private int step = -1;
		/** Thread run method. */
		public void run(){
			try {
				while (true) {
					sleep(REFRESH_DELAY);
					int newStep = -1 ;
					try {
						FileReader reader = new FileReader(STATUS_FILE);
						 newStep = reader.read();
					} catch (IOException e) {
						ExceptionManager.aspectManagedException(e, 
								ExceptionLevel.WARN);
					}
					if (newStep != step) {
						step = newStep;
						showStatus(step);
					}
				}
			} catch (InterruptedException e) {
				ExceptionManager.aspectManagedException(e, 
						ExceptionLevel.DEBUG);
			} finally{
				
				
			}
			
		}
		/** Step Status Manager. 
		 * Update GUI according status step.
		 * @param step step id
		 */
		public synchronized void showStatus(int newStep) {
			if (step > 0) {
				getStepRadioButtons()[newStep - 1]
				                      .setSelected(true);
			}
			if (step < getStepRadioButtons().length) {
				getStepRadioButtons()[newStep]
				    .setFont(new Font("Arial", Font.BOLD, 11));
			} else {
				/* At the end, delete status file */
				FileUtils.delete(new File(STATUS_FILE));
				// Launch Browser
				launchResults();
				actionButton.setText("CodeSqualing Done");
			}
		}
	}
	
}

