#summary Explanation about software metrics used in CodeSquale
==__________________________________________________________________________________________==
=Counting metrics=
==__________________________________________________________________________________________==

==1. General metrics==
|| *CS Abbr.* || *ISO Abbr.* || *Details* || *Description* || *Feature supported by CodeSquale * ||
||*NPAC*|| Packages ||Number of packages.||Total number of distinct packages in the project. Classes that are not defined in a package belong to the _default package_.||_N/A_||
||*NFIL*|| Files ||Number of source files.||The total number of sources files included in the project.||_N/A_||
||*NINT*|| Interfaces ||Number of interfaces.||Total number of interfaces(*_public_* and *_private_*).||_N/A_||

==2. Class metrics==
|| *CS Abbr.* || *ISO Abbr.* || *Details* || *Description* || *Feature supported by CodeSquale * ||
||*NTLA*|| ||Number of classes.||Total number of classes.||_N/A_||
||*NPCL*|| ||Number of *_public class *_.||Total number of *_public class_* (suffixed by the keyword *_public_*).||_N/A_||
||*NFCL*|| ||Number of *_final class*_.||Total number of *_final class_* (suffixed by the keyword *_final_*).||_N/A_||
||*NACL*|| ||Number of *_abstract class*_.||Total number of *_abstract class_* (suffixed by the keyword *_abstract_*).||_N/A_||
||*NCCL*|| ||Numer of *_concrete class*_.||Total number of *_concrete class_* (all classes which are not *_abstract_*).||_N/A_||
||*NLCL*|| ||Number of *_local class*_.||Total number of *_local class_* (suffixed by the keyword *_private_* or not suffixed by keyword).||_N/A_||
||*NLSC*|| ||Number of *_local and static class*_.||Total number of *_local_ and static class* (suffixed by the keyword *_private static_* or *_static_*).||_N/A_||
||*NNCL*|| ||Number of *_nested class_*.||Total number  of *_nested class_* (all classes nested by another class).||N/A_||
||*NTCL*|| ||Number of *_child class*_.||Total number  of *_child class_* (all classes which derived directly from another class).||_N/A_||
||*NCII*|| ||Number of class implementing at least one interface.||This measure provides a count of the total number classes implementing an interface or more.||_N/A_||

==3. Method metrics==
|| *CS Abbr.* || *ISO Abbr.* || *Details* || *Description* || *Feature supported by CodeSquale * ||
||*NOME*|| ||Number of methods.||Total number  of methods in the project (without counting the class constructors).|| Yes ||
||*NONM*|| ||Number of native methods.||A native method is a method implemented in a “native” language, usually C or C++. This measure provides a count of the total number of native methods in all the classes.||_N/A_||
||*NOPM*|| ||Number of *_public_* methods.||Count all the *_public_* methods.||_N/A_||
||*NPRM*|| ||Number of *_private_* methods.||Count all the *_private_* methods.||_N/A_||
||*NORM*|| ||Number of remote methods.||A remote method call is defined as an invocation of a method that is not declared in any of: the class itself; a class or interface that the class extends or implements; a class or method that extends the class.||_N/A_||

==4. Line of source code metrics==
|| *CS Abbr.* || *ISO Abbr.* || *Details* || *Description* || *Feature supported by CodeSquale * ||
||*NSTA*|| ||Number of statement||Total number of statements in the project.||N/A_||
||*ELOC*|| ||Number of efferent lines of source code.||Count all line of source code except blank and commented lines.||_N/A_||
||*PLOC*|| ||Number of physical line of code.||Count all line of source code except blank lines.||N/A_||
||*TOLI*|| ||Number of line of source code without any exception.||Count all lines of code contained in the project without any exception.||_N/A_||
||*COLI*|| ||Number of commented lines.||Count only commented lines.||_N/A_||
||*BLLI*|| ||Number of blank lines.||Count only blank lines.||_N/A_||


==5. Variable and attribute metrics==
|| *CS Abbr.* || *ISO Abbr.* || *Details* || *Description* || *Feature supported by CodeSquale * ||
||*NOAT*|| ||Number of attributes.||Total number of attributes in the project. Attributes are class variables.||_N/A_||
||*NOPA*|| ||Number of *_public_* attributes.||Total number of *_public_* attributes in the project.||_N/A_||
||*NPRA*|| ||Number of *_private_*  attributes.||Total number of *_private_* attributes in the project.||_N/A_||
||*NMSV*|| ||Number of *_method scope_*  variables.||Total number of *_method scope_* variables in the project. "Method scope" variables are variables that are declared and initialized inside a method corpse. They are destroyed when the method finishes processing.||_N/A_||

==__________________________________________________________________________________________==
=Unit metrics=
==__________________________________________________________________________________________==

==2. General metrics==
|| *CS Abbr.* || *ISO Abbr.* ||| *Details* || *Description* || *Feature supported by CodeSquale * ||
||*MLIM*|| ||Maximun number of LOC detected for a method.||This measure indicates the maximun number of LOC detected for a method.||_N/A_||

==2. Class metrics==

|| *CS Abbr.* || *ISO Abbr.* || *Details* || *Description* || *Feature supported by CodeSquale * ||
||*NOII*|| ||Number of implemented interface.||A Java class may implement zero or more interfaces. This measure indicates the total number of interfaces implemented by a class.||_N/A_||
||*NOCM*|| ||Number of class methods.||This measure indicates the number of methods that have been explicitly defined in a class.It does not include the methods inherited from a super class.||N/A_||
||*RROC*|| ||Reuse ratio of a class.||The reuse ratio is given by  U = Number of superclasses/Total number of classes.||N/A_||
||*RSOC*|| ||Specialization ratio of a class.||This ration measures the extent to which a superclass has captured abstraction. The specialization ratio is given as S=Number of subclasses/Number of superclasses.||N/A_||



==__________________________________________________________________________________________==
=Ratio metrics=
==__________________________________________________________________________________________==

|| *CS Abbr.* || *ISO Abbr.* || *Details* || *Description* || *Feature supported by CodeSquale * ||
||*RSPD*|| ||Percentage of blank line and space compared to the total of LOC.||The space percentage is given by the formula : Space percentage = Total number of characters / Total number of blank characters.||_N/A_||
||*RCPD*|| ||Percentage of comment compared to the total of LOC.||The comment density is given by the formula: Comment density = Number of comment lines / Total number of lines.||N/A_||
||*RELM*|| ||Average number of ELOC by method.||This measure provides the average quantity of ELOC(see _4.Line of source code metrics_) by method.||N/A_||
||*RMBC*|| ||Average number of methods by class.||This measure provides the average quantity of methods by class.||N/A_||